"use strict";(self.webpackChunktmp=self.webpackChunktmp||[]).push([[3951],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3011:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:2},s="Build API",c={unversionedId:"build-tool/api",id:"build-tool/api",title:"Build API",description:"If you just start a go-zero api demo project, you can develop an api service and run it normally without even coding. In a traditional api project, we have to create all levels of directories, write structures, define routes, add logic files, and this series of operations, if we calculate the business requirements of a protocol, it takes about 5-6 minutes to code the whole thing before we can really get into writing the business logic, and this does not take into account the various errors that may occur during the writing process, and as the number of services, as the number of protocols This part of the preparation time will rise proportionally as the number of services and protocols increases, but the goctl api can completely replace you to do this part of the work, no matter how many protocols you have to set, in the end, it will take less than 10 seconds to complete.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api.md",sourceDirName:"build-tool",slug:"/build-tool/api",permalink:"/go-zero.dev/en/docs/build-tool/api",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"api syntax",permalink:"/go-zero.dev/en/docs/build-tool/api-grammar"},next:{title:"Build RPC",permalink:"/go-zero.dev/en/docs/build-tool/rpc"}},p=[{value:"api command description",id:"api-command-description",children:[],level:3},{value:"Usage examples",id:"usage-examples",children:[],level:3}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"build-api"},"Build API"),(0,r.kt)("p",null,"If you just start a ",(0,r.kt)("inlineCode",{parentName:"p"},"go-zero")," ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," demo project, you can develop an api service and run it normally without even coding. In a traditional api project, we have to create all levels of directories, write structures, define routes, add ",(0,r.kt)("inlineCode",{parentName:"p"},"logic")," files, and this series of operations, if we calculate the business requirements of a protocol, it takes about 5-6 minutes to code the whole thing before we can really get into writing the business logic, and this does not take into account the various errors that may occur during the writing process, and as the number of services, as the number of protocols This part of the preparation time will rise proportionally as the number of services and protocols increases, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"goctl api")," can completely replace you to do this part of the work, no matter how many protocols you have to set, in the end, it will take less than 10 seconds to complete."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"where the structs are written and the route definitions are replaced with api, so all in all, what is saved is your time in the process of creating folders, adding various files and resource dependencies."))),(0,r.kt)("h3",{id:"api-command-description"},"api command description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ goctl api -h\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"NAME:\n   goctl api - generate api related files\n\nUSAGE:\n   goctl api command [command options] [arguments...]\n\nCOMMANDS:\n   new       fast create api service\n   format    format api files\n   validate  validate api file\n   doc       generate doc files\n   go        generate go files for provided api in yaml file\n   java      generate java files for provided api in api file\n   ts        generate ts files for provided api in api file\n   dart      generate dart files for provided api in api file\n   kt        generate kotlin code for provided api file\n   plugin    custom file generator\n\nOPTIONS:\n   -o value    the output api file\n   --help, -h  show help\n")),(0,r.kt)("p",null,"As you can see from the above, depending on the function, the api contains a lot of self-commands and flags, which we focus on here\n",(0,r.kt)("inlineCode",{parentName:"p"},"go")," subcommand, its function is to generate golang api service, we look at the usage help by ",(0,r.kt)("inlineCode",{parentName:"p"},"goctl api go -h"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ goctl api go -h\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"NAME:\n   goctl api go - generate go files for provided api in yaml file\n\nUSAGE:\n   goctl api go [command options] [arguments...]\n\nOPTIONS:\n   --dir value    the target dir\n   --api value    the api file\n   --style value  the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"--dir code output directory"),(0,r.kt)("li",{parentName:"ul"},"--api Specify the api source file"),(0,r.kt)("li",{parentName:"ul"},"--style Specify the file name style of the generated code file, see ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md"},"file name naming style description")," for details")),(0,r.kt)("h3",{id:"usage-examples"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ goctl api go -api user.api -dir . -style gozero\n")))}d.isMDXComponent=!0}}]);