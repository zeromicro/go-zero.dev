"use strict";(self.webpackChunktmp=self.webpackChunktmp||[]).push([[1626],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4696:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var a=n(7462),l=n(3366),o=(n(7294),n(3905)),r=["components"],i={sidebar_position:2},s="api syntax",p={unversionedId:"build-tool/api-grammar",id:"build-tool/api-grammar",title:"api syntax",description:"api example",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md",sourceDirName:"build-tool",slug:"/build-tool/api-grammar",permalink:"/go-zero.dev/en/docs/build-tool/api-grammar",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/go-zero.dev/en/docs/build-tool/tool-intro"},next:{title:"Build API",permalink:"/go-zero.dev/en/docs/build-tool/api"}},d=[{value:"api example",id:"api-example",children:[],level:2},{value:"api syntax structure",id:"api-syntax-structure",children:[{value:"syntax syntax declaration",id:"syntax-syntax-declaration",children:[],level:3}],level:2},{value:"import syntax block",id:"import-syntax-block",children:[],level:2},{value:"info syntax block",id:"info-syntax-block",children:[],level:2},{value:"type syntax block",id:"type-syntax-block",children:[],level:2},{value:"service syntax block",id:"service-syntax-block",children:[],level:2},{value:"Hidden Channels",id:"hidden-channels",children:[{value:"Single line comments",id:"single-line-comments",children:[],level:3},{value:"java style documentation comments",id:"java-style-documentation-comments",children:[],level:3}],level:2},{value:"Doc&amp;Comment",id:"doccomment",children:[],level:2}],u={toc:d};function c(e){var t=e.components,n=(0,l.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"api-syntax"},"api syntax"),(0,o.kt)("h2",{id:"api-example"},"api example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'/**\n * api syntax example and syntax description\n */\n\n// api syntax version\nsyntax = "v1"\n\n// import literal\nimport "foo.api"\n\n// import group\nimport (\n    "bar.api"\n    "foo/bar.api"\n)\ninfo(\n    author: "songmeizi"\n    date:   "2020-01-08"\n    desc:   "api syntax example and syntax description"\n)\n\n// type literal\n\ntype Foo{\n    Foo int `json:"foo"`\n}\n\n// type group\n\ntype(\n    Bar{\n        Bar int `json:"bar"`\n    }\n)\n\n// service block\n@server(\n    jwt:   Auth\n    group: foo\n)\nservice foo-api{\n    @doc "foo"\n    @handler foo\n    post /foo (Foo) returns (Bar)\n}\n')),(0,o.kt)("h2",{id:"api-syntax-structure"},"api syntax structure"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"syntax syntax declaration"),(0,o.kt)("li",{parentName:"ul"},"import syntax block"),(0,o.kt)("li",{parentName:"ul"},"info syntax block"),(0,o.kt)("li",{parentName:"ul"},"type syntax block"),(0,o.kt)("li",{parentName:"ul"},"service syntax block"),(0,o.kt)("li",{parentName:"ul"},"Hidden channels")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"In the above syntax structure, each syntax block can be declared anywhere in the .api file, syntactically speaking, according to the syntax block as a unit.\nHowever, to improve reading efficiency, we recommend declaring them in the above order, as the order of syntax blocks may be controlled by strict mode in the future."))),(0,o.kt)("h3",{id:"syntax-syntax-declaration"},"syntax syntax declaration"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"syntax")," is a newly added syntax construct that was introduced to address."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Quickly locating problematic syntax constructs against api versions"),(0,o.kt)("li",{parentName:"ul"},"Parsing syntax for versions"),(0,o.kt)("li",{parentName:"ul"},"Preventing api syntax from being forward compatible due to major version upgrades")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The api being imported must match the syntax version of the main api."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Definition")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-antlrv4"},"'syntax'={checkVersion(p)}STRING\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Description")),(0,o.kt)("p",null,"syntax: fixed token that marks the beginning of a syntax structure"),(0,o.kt)("p",null,"checkVersion: custom go method to check if ",(0,o.kt)("inlineCode",{parentName:"p"},"STRING")," is a legal version number, the current detection logic is that STRING must be satisfying ",(0,o.kt)("inlineCode",{parentName:"p"},'(?m) "v[1-9][0-9]*"')," regular."),(0,o.kt)("p",null,'STRING: a string wrapped in English double quotes, such as "v1"'),(0,o.kt)("p",null,"An api syntax file can only have 0 or 1 syntax declaration, if there is no syntax, then the default is the v1 version"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of correct syntax")," \u2705"),(0,o.kt)("p",null,"eg1\uff1aUnstandardized writing method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'syntax="v1"\n')),(0,o.kt)("p",null,"eg2: normative writing (recommended)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'syntax = "v2"\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of incorrect syntax")," \u274c"),(0,o.kt)("p",null,"eg1\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'syntax = "v0"\n')),(0,o.kt)("p",null,"eg2\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"syntax = v1\n")),(0,o.kt)("p",null,"eg3\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'syntax = "V1"\n')),(0,o.kt)("h2",{id:"import-syntax-block"},"import syntax block"),(0,o.kt)("p",null,"As business size increases, more and more structures and services are defined in the api, and all the syntax descriptions are in one api file, which is such a bad problem that it will greatly increase the reading difficulty and maintenance difficulty. import syntax block can help us solve this problem by splitting the api file.\nBy splitting api files, different api files are declared according to certain rules, which can reduce the difficulty of reading and maintaining."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Here import does not contain package declarations like golang, it is just an introduction of file paths, and eventually parsing will bring all declarations together into a single spec.\nYou can't import more than one of the same path, otherwise it will be parsed incorrectly."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Definition")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-antlrv4"},"'import' {checkImportValue(p)}STRING  \n|'import' '(' ({checkImportValue(p)}STRING)+ ')'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Description")),(0,o.kt)("p",null,"import: fixed token, marking the beginning of an import syntax"),(0,o.kt)("p",null,"checkImportValue: custom go method to check if ",(0,o.kt)("inlineCode",{parentName:"p"},"STRING")," is a legal file path, the current detection logic is that STRING must be satisfying ",(0,o.kt)("inlineCode",{parentName:"p"},'(?m)"(/? [a-zA-Z0-9_#-])+\\.api"')," canonical."),(0,o.kt)("p",null,'STRING: a string wrapped in English double quotes, e.g. "foo.api"'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of correct syntax")," \u2705"),(0,o.kt)("p",null,"eg\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'import "foo.api"\nimport "foo/bar.api"\n\nimport(\n    "bar.api"\n    "foo/bar/foo.api"\n)\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of incorrect syntax")," \u274c"),(0,o.kt)("p",null,"eg\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'import foo.api\nimport "foo.txt"\nimport (\n    bar.api\n    bar.api\n)\n')),(0,o.kt)("h2",{id:"info-syntax-block"},"info syntax block"),(0,o.kt)("p",null,"The info syntax block is a syntax body containing multiple key-value pairs, which is equivalent to the description of an api service, and is mapped by the parser to the spec.\nSpec for the meta elements that need to be carried when translating to other languages (golang, java, etc.). If it's just a description of the current api, without considering its translation to other languages, a simple multi-line comment or a java-style documentation comment is sufficient; see ",(0,o.kt)("strong",{parentName:"p"},"Hidden Passages")," below for comment descriptions."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Cannot use duplicate keys, only 0 or 1 info syntax block per api file"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Definition")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-antlrv4"},"'info' '(' (ID {checkKeyValue(p)}VALUE)+ ')'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Description")),(0,o.kt)("p",null,"info: fixed token, marking the beginning of an info syntax block"),(0,o.kt)("p",null,"checkKeyValue: custom go method, check if ",(0,o.kt)("inlineCode",{parentName:"p"},"VALUE")," is a legal value."),(0,o.kt)("p",null,"VALUE: the value corresponding to the key, can be a single line except '\\r', '\\n', '/' after any character, multiple lines please wrap with \"\", but it is strongly recommended that all are wrapped with \"\""),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of correct syntax")," \u2705"),(0,o.kt)("p",null,"eg1\uff1aUnstandardized writing method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'info(\nfoo: foo value\nbar:"bar value"\n    desc:"long long long long\nlong long text"\n)\n')),(0,o.kt)("p",null,"eg2: normative writing (recommended)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'info(\n    foo: "foo value"\n    bar: "bar value"\n    desc: "long long long long long long text"\n)\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of incorrect syntax")," \u274c"),(0,o.kt)("p",null,"eg1\uff1aNo key-value content"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"info()\n")),(0,o.kt)("p",null,"eg2\uff1aDoes not contain a colon"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"info(\n    foo value\n)\n")),(0,o.kt)("p",null,"eg3\uff1akey-value without newline"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'info(foo:"value")\n')),(0,o.kt)("p",null,"eg4\uff1aNo key"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'info(\n    : "value"\n)\n')),(0,o.kt)("p",null,"eg5\uff1aIllegal key"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'info(\n    12: "value"\n)\n')),(0,o.kt)("p",null,"eg6\uff1aRemove old version multi-line syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"info(\n    foo: >\n    some text\n    <\n)\n")),(0,o.kt)("h2",{id:"type-syntax-block"},"type syntax block"),(0,o.kt)("p",null,"In api service, we need to use a structure (class) as a request body, response body carrier, so we need to declare some structure to do this thing, type syntax block evolved from golang type, of course, also retains some golang type characteristics, along with golang characteristics are."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"preserves the golang built-in data types ",(0,o.kt)("inlineCode",{parentName:"li"},"bool"),",",(0,o.kt)("inlineCode",{parentName:"li"},"int"),",",(0,o.kt)("inlineCode",{parentName:"li"},"int8"),",",(0,o.kt)("inlineCode",{parentName:"li"},"int16"),",",(0,o.kt)("inlineCode",{parentName:"li"},"int32"),",",(0,o.kt)("inlineCode",{parentName:"li"},"int64"),",",(0,o.kt)("inlineCode",{parentName:"li"},"uint"),",",(0,o.kt)("inlineCode",{parentName:"li"},"uint8"),",",(0,o.kt)("inlineCode",{parentName:"li"},"uint16"),",",(0,o.kt)("inlineCode",{parentName:"li"},"uint32"),",",(0,o.kt)("inlineCode",{parentName:"li"},"uint64"),",",(0,o.kt)("inlineCode",{parentName:"li"},"uintptr"),"\n,",(0,o.kt)("inlineCode",{parentName:"li"},"float32"),",",(0,o.kt)("inlineCode",{parentName:"li"},"float64"),",",(0,o.kt)("inlineCode",{parentName:"li"},"complex64"),",",(0,o.kt)("inlineCode",{parentName:"li"},"complex128"),",",(0,o.kt)("inlineCode",{parentName:"li"},"string"),",",(0,o.kt)("inlineCode",{parentName:"li"},"byte"),",",(0,o.kt)("inlineCode",{parentName:"li"},"rune"),","),(0,o.kt)("li",{parentName:"ul"},"Compatible with golang struct style declarations"),(0,o.kt)("li",{parentName:"ul"},"Retain golang keywords")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"alias is not supported"),(0,o.kt)("li",{parentName:"ul"},"The time.Time data type is not supported"),(0,o.kt)("li",{parentName:"ul"},"Structure names, field names, and cannot be golang keywords")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Definition")),(0,o.kt)("p",null,"Since it is similar to golang, it will not be described in detail. Please see the specific syntax definition in ","[ApiParser.g4]","(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zeromicro/go-zero/blob/master/tools/goctl/api/parser/g4/ApiParser"},"https://github.com/zeromicro/go-zero/blob/master/tools/goctl/api/parser/g4/ApiParser"),". g4) to see the typeSpec definition."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax description")),(0,o.kt)("p",null,"Refer to golang writing style"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Correct syntax example")," \u2705"),(0,o.kt)("p",null,"eg1: not written in the correct way"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'type Foo struct{\n    Id int `path:"id"` // \u2460\n    Foo int `json:"foo"`\n}\n\ntype Bar struct{\n    // Non-exportable fields\n    bar int `form:"bar"`\n}\n\ntype(\n    // Non-exportable Structs\n    fooBar struct{\n        FooBar int `json:"fooBar"`\n    }\n)\n')),(0,o.kt)("p",null,"eg2: normative writing (recommended)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'type Foo{\n    Id int `path:"id"`\n    Foo int `json:"foo"`\n}\n\ntype Bar{\n    Bar int `form:"bar"`\n}\n\ntype(\n    FooBar{\n        FooBar int `json:"fooBar"`\n    }\n)\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of incorrect syntax")," \u274c"),(0,o.kt)("p",null,"eg"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"type Gender int // Not supported\n\n// non struct token\ntype Foo structure{ \n  CreateTime time.Time // Time is not supported and tag is not declared\n}\n\n// golang keyword var\ntype var{} \n\ntype Foo{\n  // golang keyword interface\n  Foo interface  // No statement tag\n}\n\n\ntype Foo{\n  foo int \n  // map key must be a golang built-in data type with no tag declared\n  m map[Bar]string\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"tag definition is the same as json tag syntax in golang. In addition to json tag, go-zero also provides some other tags to implement the description of the fields.\nSee the following table for details.\nSee the table below for details. "))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"tag table",(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"tag key")," ",(0,o.kt)("td",null,"Description")," ",(0,o.kt)("td",null,"Provider"),(0,o.kt)("td",null,"Valid range ")," ",(0,o.kt)("td",null,"Example ")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"json")," ",(0,o.kt)("td",null,"json serialization tag")," ",(0,o.kt)("td",null,"golang")," ",(0,o.kt)("td",null,"request, response")," ",(0,o.kt)("td",null,(0,o.kt)("code",null,'json:"fooo"'))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"path")," ",(0,o.kt)("td",null,"Routing path, such as ",(0,o.kt)("code",null,"/foo/:id"))," ",(0,o.kt)("td",null,"go-zero")," ",(0,o.kt)("td",null,"request")," ",(0,o.kt)("td",null,(0,o.kt)("code",null,'path:"id"'))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"form")," ",(0,o.kt)("td",null,"Identifies that the request body is a form (in the POST method) or a query (in the GET method ",(0,o.kt)("code",null,"/search?name=keyword"),")")," ",(0,o.kt)("td",null," go-zero")," ",(0,o.kt)("td",null,"request")," ",(0,o.kt)("td",null,(0,o.kt)("code",null,'form:"name"'))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"header")," ",(0,o.kt)("td",null,"HTTP header, such as ",(0,o.kt)("code",null,"Name: value"))," ",(0,o.kt)("td",null,"go-zero")," ",(0,o.kt)("td",null,"request")," ",(0,o.kt)("td",null," ",(0,o.kt)("code",null,'header:"name"'))))),(0,o.kt)("li",{parentName:"ul"},"tag modifier")),(0,o.kt)("p",null,"Common parameter verification description"),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"tag key ")," ",(0,o.kt)("td",null,"Description ")," ",(0,o.kt)("td",null,"Provider ")," ",(0,o.kt)("td",null,"Valid range ")," ",(0,o.kt)("td",null,"Example ")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"optional")," ",(0,o.kt)("td",null,"Define the current field as an optional parameter")," ",(0,o.kt)("td",null,"go-zero")," ",(0,o.kt)("td",null,"request")," ",(0,o.kt)("td",null,(0,o.kt)("code",null,'json:"name ,optional"'))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"options")," ",(0,o.kt)("td",null,"Define the enumeration value of the current field, multiple are separated by a vertical bar|")," ",(0,o.kt)("td",null,"go-zero")," ",(0,o.kt)("td",null,"request")," ",(0,o.kt)("td",null,(0,o.kt)("code",null,'json:"gender,options=male"'))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"default")," ",(0,o.kt)("td",null,"Define the default value of the current field")," ",(0,o.kt)("td",null,"go-zero")," ",(0,o.kt)("td",null,"request")," ",(0,o.kt)("td",null,(0,o.kt)("code",null,'json:"gender,default =male"'))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"range")," ",(0,o.kt)("td",null,"Define the value range of the current field")," ",(0,o.kt)("td",null,"go-zero")," ",(0,o.kt)("td",null,"request")," ",(0,o.kt)("td",null,(0,o.kt)("code",null,'json:"age,range =[0:120]"')))),":::tip The tag modifier needs to be separated by a quoted comma after the tag value :::",(0,o.kt)("h2",{id:"service-syntax-block"},"service syntax block"),(0,o.kt)("p",null,"service syntax block is used to define api services, including service name, service metadata, middleware declaration, routes, handlers, etc."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"The names of the main api and the api service being imported must be the same, and there must be no service name ambiguity."),(0,o.kt)("li",{parentName:"ul"},"handler names must not be repeated"),(0,o.kt)("li",{parentName:"ul"},"route (request method + request path) names must not be duplicated"),(0,o.kt)("li",{parentName:"ul"},"The request body must be declared as a normal (non-pointer) struct, the response body has some forward-compatible processing, see below for details")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Definition")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-antlrv4"},"serviceSpec:    atServer? serviceApi;\natServer:       '@server' lp='(' kvLit+ rp=')';\nserviceApi:     {match(p,\"service\")}serviceToken=ID serviceName lbrace='{' serviceRoute* rbrace='}';\nserviceRoute:   atDoc? (atServer|atHandler) route;\natDoc:          '@doc' lp='('? ((kvLit+)|STRING) rp=')'?;\natHandler:      '@handler' ID;\nroute:          {checkHttpMethod(p)}httpMethod=ID path request=body? returnToken=ID? response=replybody?;\nbody:           lp='(' (ID)? rp=')';\nreplybody:      lp='(' dataType? rp=')';\n// kv\nkvLit:          key=ID {checkKeyValue(p)}value=LINE_VALUE;\n\nserviceName:    (ID '-'?)+;\npath:           (('/' (ID ('-' ID)*))|('/:' (ID ('-' ID)?)))+;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Description")),(0,o.kt)("p",null,"serviceSpec: contains an optional syntax block ",(0,o.kt)("inlineCode",{parentName:"p"},"atServer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"serviceApi")," syntax block, which follows the sequence pattern (writing service must follow the sequence, otherwise it will be parsed with errors)"),(0,o.kt)("p",null,"atServer: optional syntax block, defining the server metadata of key-value structure, '@server'\nIt can be used to describe the serviceApi or route syntax block, and there are some special key keys that need to be noted when it is used to describe different syntax blocks, see ",(0,o.kt)("strong",{parentName:"p"},"atServer key key description"),"."),(0,o.kt)("p",null,"serviceApi: contains 1 to multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"serviceRoute")," syntax blocks"),(0,o.kt)("p",null,"serviceRoute: contains ",(0,o.kt)("inlineCode",{parentName:"p"},"atDoc"),", handler and ",(0,o.kt)("inlineCode",{parentName:"p"},"route")," according to the sequence pattern"),(0,o.kt)("p",null,"Spec structure after parsing, if you don't care to pass it to spec."),(0,o.kt)("p",null,"handler: is the handler level description of the route, you can specify the handler name by specifying the ",(0,o.kt)("inlineCode",{parentName:"p"},"handler")," key via atServer, or you can define the handler name directly using the atHandler syntax block"),(0,o.kt)("p",null,"atHandler: '@handler' fixed token followed by a value that follows the regular ",(0,o.kt)("inlineCode",{parentName:"p"},"[_a-zA-Z][a-zA-Z_-]*"),"), used to declare a handler name"),(0,o.kt)("p",null,"route: route, has ",(0,o.kt)("inlineCode",{parentName:"p"},"httpMethod"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"path"),", optional ",(0,o.kt)("inlineCode",{parentName:"p"},"request"),", optional ",(0,o.kt)("inlineCode",{parentName:"p"},"response"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"httpMethod")," is must be lowercase."),(0,o.kt)("p",null,"body: api request body syntax definition, must be wrapped by the () optional ID value"),(0,o.kt)("p",null,"replyBody: api response body syntax definition, must be wrapped by () struct, ~~array (forward-compatible processing, subsequent may be deprecated, highly recommended to struct wrapped, do not directly use array as the response body) ~~"),(0,o.kt)("p",null,"kvLit: same as info key-value"),(0,o.kt)("p",null,"serviceName: ID value that can have multiple '-' joins"),(0,o.kt)("p",null,"path: api request path, must start with '/' or '/:', not end with '/', the middle can contain ID or multiple '-' join the ID string"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"atServer Key Key Description Description")),(0,o.kt)("p",null,"When modifying service"),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"key"),(0,o.kt)("td",null,"Description"),(0,o.kt)("td",null,"Example")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"jwt"),(0,o.kt)("td",null,"Declare that all routes under the current service require jwt authentication, and will automatically generate code containing jwt logic"),(0,o.kt)("td",null,(0,o.kt)("code",null,"jwt: Auth")),(0,o.kt)("td",null,(0,o.kt)("code",null,"jwt: Auth"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"group"),(0,o.kt)("td",null,"Declare the current service or routing file group"),(0,o.kt)("td",null,(0,o.kt)("code",null,"group: login"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"middleware"),(0,o.kt)("td",null,"Declare that the current service needs to enable middleware"),(0,o.kt)("td",null,(0,o.kt)("code",null,"middleware: AuthMiddleware"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"prefix"),(0,o.kt)("td",null,"Add routing group"),(0,o.kt)("td",null,(0,o.kt)("code",null,"prefix: /api")))),(0,o.kt)("p",null,"When modifying the route"),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"key"),(0,o.kt)("td",null,"Description"),(0,o.kt)("td",null,"Example")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"handler"),(0,o.kt)("td",null,"Declare a handler"),(0,o.kt)("td",null,"-"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example of correct syntax")," \u2705"),(0,o.kt)("p",null,"eg1\uff1aUnstandardized writing method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"@server(\n  jwt: Auth\n  group: foo\n  middleware: AuthMiddleware\n  prefix /api\n)\nservice foo-api{\n  @doc(\n    summary: foo\n  )\n  @server(\n    handler: foo\n  )\n  // Non-exportable body\n  post /foo/:id (foo) returns (bar)\n  \n  @doc \"bar\"\n  @handler bar\n  post /bar returns ([]int)// Arrays are not recommended as response bodies\n  \n  @handler fooBar\n  post /foo/bar (Foo) returns // 'returns' can be omitted\n}\n")),(0,o.kt)("p",null,"eg2: normative writing (recommended)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'@server(\n  jwt: Auth\n  group: foo\n  middleware: AuthMiddleware\n  prefix: /api\n)\nservice foo-api{\n  @doc "foo"\n  @handler foo\n  post /foo/:id (Foo) returns (Bar)\n}\n\nservice foo-api{\n  @handler ping\n  get /ping\n  \n  @doc "foo"\n  @handler bar\n  post /bar/:id (Foo)\n}\n\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of incorrect syntax")," \u274c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'// Empty server syntax blocks are not supported\n@server(\n)\n// \u4e0d\u652f\u6301\u7a7a\u7684service\u8bed\u6cd5\u5757\nservice foo-api{\n}\n\nservice foo-api{\n  @doc kkkk // The short version doc must be caused by double quotation marks in English\n  @handler foo\n  post /foo\n  \n  @handler foo // Repeated handlers\n  post /bar\n  \n  @handler fooBar\n  post /bar // Duplicate Routing\n  \n  // @handler and @doc are in the wrong order\n  @handler someHandler\n  @doc "some doc"\n  post /some/path\n  \n  // handler missing\n  post /some/path/:id\n  \n  @handler reqTest\n  post /foo/req (*Foo) // Data types other than normal structures are not supported as request bodies\n  \n  @handler replyTest\n  post /foo/reply returns (*Foo) // Do not support data types other than ordinary structures, arrays (forward compatible, subsequently considered deprecated) as response bodies\n}\n')),(0,o.kt)("h2",{id:"hidden-channels"},"Hidden Channels"),(0,o.kt)("p",null,"We will only talk about comments here, because blank and newline symbols are useless at the moment."),(0,o.kt)("h3",{id:"single-line-comments"},"Single line comments"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax definition")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-antlrv4"},"'//' ~[\\r\\n]*\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax description"),"\nAs you know from the syntax definition, a single line comment must start with ",(0,o.kt)("inlineCode",{parentName:"p"},"//")," and the content must not contain a line break"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Correct syntax example")," \u2705"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"// doc\n// comment\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of incorrect syntax")," \u274c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"// break\nline comments\n")),(0,o.kt)("h3",{id:"java-style-documentation-comments"},"java style documentation comments"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax Definition")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-antlrv4"},"'/*' .*? '*/'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax description")),(0,o.kt)("p",null,"As you know from the syntax definition, a single line comment must start with ",(0,o.kt)("inlineCode",{parentName:"p"},"/*")," and end with ",(0,o.kt)("inlineCode",{parentName:"p"},"*/")," in any character."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example of correct syntax")," \u2705"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"/**\n * java-style doc\n */\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples of incorrect syntax")," \u274c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},"/*\n * java-style doc */\n */\n")),(0,o.kt)("h2",{id:"doccomment"},"Doc&Comment"),(0,o.kt)("p",null,"We specify that all comments (single line, or multiple lines) from line+1 of the previous syntax block (non-hidden channel content) to the first element of the current syntax block are doc, and retain the ",(0,o.kt)("inlineCode",{parentName:"p"},"//"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/*"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*/")," original tokens."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Comment")),(0,o.kt)("p",null,"We specify that a comment block (on the same line, or on multiple lines) starting from the line where the last element of the current syntax block is located is a comment and retains the ",(0,o.kt)("inlineCode",{parentName:"p"},"//"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/*"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*/")," primitive tokens.\nSupport for syntax blocks Doc and Comment"),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Grammar blocks"),(0,o.kt)("td",null,"parent syntax block"),(0,o.kt)("td",null,"Doc"),(0,o.kt)("td",null,"Comment")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"syntaxLit"),(0,o.kt)("td",null,"api"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"kvLit"),(0,o.kt)("td",null,"infoSpec"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"importLit"),(0,o.kt)("td",null,"importSpec"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"typeLit"),(0,o.kt)("td",null,"api"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u274c")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"typeLit"),(0,o.kt)("td",null,"typeBlock"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u274c")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"field"),(0,o.kt)("td",null,"typeLit"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"key-value"),(0,o.kt)("td",null,"atServer"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"atHandler"),(0,o.kt)("td",null,"serviceRoute"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"route"),(0,o.kt)("td",null,"serviceRoute"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"))),(0,o.kt)("p",null,"The following is the corresponding syntax block parsed with doc and comment writing"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-api"},'// syntaxLit doc\nsyntax = "v1" // syntaxLit commnet\n\ninfo(\n  // kvLit doc\n  author: songmeizi // kvLit comment\n)\n\n// typeLit doc\ntype Foo {}\n\ntype(\n  // typeLit doc\n  Bar{}\n  \n  FooBar{\n    // filed doc\n    Name int // filed comment\n  }\n)\n\n@server(\n  /**\n   * kvLit doc\n   * Enabling jwt forensics\n   */\n  jwt: Auth /**kvLit comment*/\n)\nservice foo-api{\n  // atHandler doc\n  @handler foo //atHandler comment\n  \n  /*\n   * route doc\n   * post request\n   * path /foo\n   * Request Body\uff1aFoo\n   * Response Body\uff1aFoo\n   */\n  post /foo (Foo) returns (Foo) // route comment\n}\n')))}c.isMDXComponent=!0}}]);